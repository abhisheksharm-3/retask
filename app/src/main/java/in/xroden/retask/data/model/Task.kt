package `in`.xroden.retask.data.model

import androidx.compose.ui.graphics.Color
import androidx.core.graphics.toColorInt
import androidx.room.Entity
import androidx.room.Ignore
import androidx.room.PrimaryKey
import kotlin.time.Duration.Companion.milliseconds

/**
 * Represents a task entity in the database.
 *
 * This data class is the single source of truth for what constitutes a task
 * in the application.
 *
 * @param id The unique identifier for the task. Auto-generated by Room.
 * @param title The title or name of the task.
 * @param dueDate The timestamp in milliseconds when the task is due.
 * @param isCompleted A flag indicating whether the task has been completed.
 * @param colorHex The color for the task's visual representation in hex format (e.g., "#RRGGBB").
 */
@Entity(tableName = "tasks")
data class Task(
    @PrimaryKey(autoGenerate = true)
    val id: Long = 0L,
    val title: String,
    val dueDate: Long,
    val isCompleted: Boolean = false,
    val colorHex: String = "#FFFFD6" // Default light yellow
) {
    /**
     * A convenience function to convert the hex color string to a Compose [Color] object.
     *
     * @return The [Color] object for UI rendering.
     * @see Ignore This is ignored by Room as it's UI-specific logic. For a better
     * architecture, this conversion should happen in the UI/ViewModel layer.
     */
    fun getBackgroundColor(): Color {
        return Color(colorHex.toColorInt())
    }

    /**
     * A convenience function that generates a human-readable string describing when the task is due.
     *
     * @return A formatted string like "Due in 5 hours" or "Was due 2 days ago".
     * @see Ignore This is ignored by Room as it's presentation-layer logic. For a better
     * architecture, this formatting should be handled in the UI/ViewModel layer.
     */
    @Ignore
    fun getDueText(): String {
        val diff = (dueDate - System.currentTimeMillis()).milliseconds

        return if (diff.isPositive()) {
            when {
                diff.inWholeMinutes < 1 -> "Due in moments"
                diff.inWholeHours < 1 -> "Due in ${diff.inWholeMinutes} minutes"
                diff.inWholeDays < 1 -> "Due in ${diff.inWholeHours} hours"
                else -> "Due in ${diff.inWholeDays} days"
            }
        } else {
            val pastDueDiff = diff.absoluteValue
            when {
                pastDueDiff.inWholeMinutes < 1 -> "Due now"
                pastDueDiff.inWholeHours < 1 -> "Was due ${pastDueDiff.inWholeMinutes} minutes ago"
                pastDueDiff.inWholeDays < 1 -> "Was due ${pastDueDiff.inWholeHours} hours ago"
                else -> "Was due ${pastDueDiff.inWholeDays} days ago"
            }
        }
    }
}