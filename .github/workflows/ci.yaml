name: Retask CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Build the debug APK first (no signing needed)
      - name: Build Debug APK
        run: ./gradlew assembleDebug

      - name: Upload Debug APK to Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: app-debug
          path: app/build/outputs/apk/debug/app-debug.apk

      # Decode the base64 encoded keystore file
      # Using the exact path that's hardcoded in the Gradle config
      - name: Decode Keystore
        run: |
          mkdir -p app/app
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > app/app/keystore.jks

      # Build the release APK with signing configuration
      # No need to specify the path since it's hardcoded in the build config
      - name: Build Release APK
        run: ./gradlew assembleRelease

      # Upload the signed release APK as an artifact
      - name: Upload Release APK to Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: retask-release
          path: app/build/outputs/apk/release/app-release.apk

  release:
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[release')
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # Download the signed release APK
      - name: Download Release APK from build
        uses: actions/download-artifact@v4
        with:
          name: retask-release
          path: artifacts

      # Extract version from commit message
      - name: Extract version from commit message
        id: extract_version
        run: |
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          if [[ $COMMIT_MSG =~ \[release\ v([0-9]+\.[0-9]+\.[0-9]+)\] ]]; then
            echo "version=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
          else
            echo "version=1.0.${{ github.run_number }}" >> $GITHUB_OUTPUT
          fi

      # Rename the APK to include the version
      - name: Rename APK
        run: |
          mkdir -p renamed
          cp artifacts/app-release.apk renamed/retask-v${{ steps.extract_version.outputs.version }}.apk

      # Create GitHub release with the renamed APK
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.extract_version.outputs.version }}
          name: Release v${{ steps.extract_version.outputs.version }}
          draft: false
          prerelease: false
          files: renamed/retask-v${{ steps.extract_version.outputs.version }}.apk
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}