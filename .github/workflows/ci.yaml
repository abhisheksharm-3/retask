name: Retask CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle' # Enable Gradle caching for faster builds

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: 'wrapper'
          cache-read-only: false

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Decode the keystore file once to a secure location
      - name: Decode Keystore
        if: github.event_name != 'pull_request' # Skip for PRs for security
        run: |
          mkdir -p $HOME/keystore
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > $HOME/keystore/release.jks
          echo "KEYSTORE_PATH=$HOME/keystore/release.jks" >> $GITHUB_ENV

      # Build debug APK first
      - name: Build Debug APK
        run: ./gradlew assembleDebug --stacktrace

      # Build release APK only on main branch or manual trigger
      - name: Build Release APK
        if: github.event_name != 'pull_request'
        run: |
          ./gradlew assembleRelease \
            -Pandroid.injected.signing.store.file=${KEYSTORE_PATH} \
            -Pandroid.injected.signing.store.password=${{ secrets.KEYSTORE_PASSWORD }} \
            -Pandroid.injected.signing.key.alias=${{ secrets.KEY_ALIAS }} \
            -Pandroid.injected.signing.key.password=${{ secrets.KEY_PASSWORD }} \
            --stacktrace

      # Generate version properties for naming consistency
      - name: Generate Version Properties
        id: version
        run: |
          VERSION_NAME=$(./gradlew -q printVersionName)
          echo "VERSION_NAME=${VERSION_NAME}" >> $GITHUB_ENV
          echo "version_name=${VERSION_NAME}" >> $GITHUB_OUTPUT

      # Collect and organize APKs
      - name: Organize APKs
        run: |
          mkdir -p artifacts
          # Copy debug APK if it exists
          if [ -f app/build/outputs/apk/debug/app-debug.apk ]; then
            cp app/build/outputs/apk/debug/app-debug.apk artifacts/retask-${VERSION_NAME}-debug.apk
          fi
          
          # Copy release APK if it exists
          if [ -f app/build/outputs/apk/release/app-release.apk ]; then
            cp app/build/outputs/apk/release/app-release.apk artifacts/retask-${VERSION_NAME}-release.apk
          fi
          
          ls -la artifacts/

      # Upload artifacts with specific names
      - name: Upload APKs
        uses: actions/upload-artifact@v4
        with:
          name: retask-${VERSION_NAME}-apks
          path: artifacts/*.apk
          if-no-files-found: error
          retention-days: 7

  release:
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[release]')
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # Download artifacts from the build job
      - name: Download APKs
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Set Version
        run: |
          # Extract version directly from build.gradle.kts
          VERSION=$(grep 'versionName =' app/build.gradle.kts | sed -E 's/.*versionName = "([0-9]+\.[0-9]+\.[0-9]+)".*/\1/')

          # Fallback if grep fails
          if [ -z "$VERSION" ]; then
            VERSION="1.1.0"
          fi

          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Using version: $VERSION"

          # Generate changelog
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          echo "$COMMIT_MSG" | sed -n '/# Changelog/,$p' > CHANGELOG.md

          if [ ! -s CHANGELOG.md ]; then
            echo "# Retask v${VERSION}" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "Release date: $(date +'%Y-%m-%d')" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "$COMMIT_MSG" >> CHANGELOG.md
          fi

      # Create a GitHub release
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.VERSION }}
          name: Retask v${{ env.VERSION }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false
          files: artifacts/**/*.apk
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}